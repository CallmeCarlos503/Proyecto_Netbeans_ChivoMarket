
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ServiciosTrabajador", targetNamespace = "http://Service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServiciosTrabajador {


    /**
     * 
     * @param correo
     * @param contra
     * @return
     *     returns service.Trabajador
     */
    @WebMethod(operationName = "ValidarTrabajador")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ValidarTrabajador", targetNamespace = "http://Service/", className = "service.ValidarTrabajador")
    @ResponseWrapper(localName = "ValidarTrabajadorResponse", targetNamespace = "http://Service/", className = "service.ValidarTrabajadorResponse")
    @Action(input = "http://Service/ServiciosTrabajador/ValidarTrabajadorRequest", output = "http://Service/ServiciosTrabajador/ValidarTrabajadorResponse")
    public Trabajador validarTrabajador(
        @WebParam(name = "Contra", targetNamespace = "")
        String contra,
        @WebParam(name = "Correo", targetNamespace = "")
        String correo);

    /**
     * 
     * @param idrol
     * @param numero
     * @param correo
     * @param nickname
     * @param dui
     * @param contrasena
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "Insertar_Trabajador")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "Insertar_Trabajador", targetNamespace = "http://Service/", className = "service.InsertarTrabajador")
    @ResponseWrapper(localName = "Insertar_TrabajadorResponse", targetNamespace = "http://Service/", className = "service.InsertarTrabajadorResponse")
    @Action(input = "http://Service/ServiciosTrabajador/Insertar_TrabajadorRequest", output = "http://Service/ServiciosTrabajador/Insertar_TrabajadorResponse")
    public String insertarTrabajador(
        @WebParam(name = "Nickname", targetNamespace = "")
        String nickname,
        @WebParam(name = "Correo", targetNamespace = "")
        String correo,
        @WebParam(name = "Contrasena", targetNamespace = "")
        String contrasena,
        @WebParam(name = "Numero", targetNamespace = "")
        String numero,
        @WebParam(name = "DUI", targetNamespace = "")
        String dui,
        @WebParam(name = "IDROL", targetNamespace = "")
        int idrol);

    /**
     * 
     * @param idROL
     * @param numero
     * @param correo
     * @param nickname
     * @param dui
     * @param contrasena
     * @param id
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "ActualizarTrabajador")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ActualizarTrabajador", targetNamespace = "http://Service/", className = "service.ActualizarTrabajador")
    @ResponseWrapper(localName = "ActualizarTrabajadorResponse", targetNamespace = "http://Service/", className = "service.ActualizarTrabajadorResponse")
    @Action(input = "http://Service/ServiciosTrabajador/ActualizarTrabajadorRequest", output = "http://Service/ServiciosTrabajador/ActualizarTrabajadorResponse")
    public String actualizarTrabajador(
        @WebParam(name = "ID", targetNamespace = "")
        int id,
        @WebParam(name = "Nickname", targetNamespace = "")
        String nickname,
        @WebParam(name = "Correo", targetNamespace = "")
        String correo,
        @WebParam(name = "Contrasena", targetNamespace = "")
        String contrasena,
        @WebParam(name = "Numero", targetNamespace = "")
        String numero,
        @WebParam(name = "DUI", targetNamespace = "")
        String dui,
        @WebParam(name = "ID_ROL", targetNamespace = "")
        int idROL);

    /**
     * 
     * @param id
     * @return
     *     returns java.util.List<service.Trabajador>
     */
    @WebMethod(operationName = "ListarEspecifico")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ListarEspecifico", targetNamespace = "http://Service/", className = "service.ListarEspecifico")
    @ResponseWrapper(localName = "ListarEspecificoResponse", targetNamespace = "http://Service/", className = "service.ListarEspecificoResponse")
    @Action(input = "http://Service/ServiciosTrabajador/ListarEspecificoRequest", output = "http://Service/ServiciosTrabajador/ListarEspecificoResponse")
    public List<Trabajador> listarEspecifico(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param id
     * @return
     *     returns service.Trabajador
     */
    @WebMethod(operationName = "EliminarT")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "EliminarT", targetNamespace = "http://Service/", className = "service.EliminarT")
    @ResponseWrapper(localName = "EliminarTResponse", targetNamespace = "http://Service/", className = "service.EliminarTResponse")
    @Action(input = "http://Service/ServiciosTrabajador/EliminarTRequest", output = "http://Service/ServiciosTrabajador/EliminarTResponse")
    public Trabajador eliminarT(
        @WebParam(name = "ID", targetNamespace = "")
        int id);

    /**
     * 
     * @return
     *     returns java.util.List<service.Trabajador>
     */
    @WebMethod(operationName = "Listar")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "Listar", targetNamespace = "http://Service/", className = "service.Listar")
    @ResponseWrapper(localName = "ListarResponse", targetNamespace = "http://Service/", className = "service.ListarResponse")
    @Action(input = "http://Service/ServiciosTrabajador/ListarRequest", output = "http://Service/ServiciosTrabajador/ListarResponse")
    public List<Trabajador> listar();

}
